
test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ebc  08000ebc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ebc  08000ebc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08000ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000018  08000edc  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000050  08000edc  00020050  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003dde  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000eb7  00000000  00000000  00023e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004d8  00000000  00000000  00024cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  000251b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001e58  00000000  00000000  000255f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a9e  00000000  00000000  00027448  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00028ee6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000012f8  00000000  00000000  00028f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a25c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08000ea4 	.word	0x08000ea4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08000ea4 	.word	0x08000ea4

0800014c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000154:	2300      	movs	r3, #0
 8000156:	617b      	str	r3, [r7, #20]
 8000158:	2300      	movs	r3, #0
 800015a:	613b      	str	r3, [r7, #16]
 800015c:	230f      	movs	r3, #15
 800015e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	78db      	ldrb	r3, [r3, #3]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d03a      	beq.n	80001de <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000168:	4b27      	ldr	r3, [pc, #156]	; (8000208 <NVIC_Init+0xbc>)
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	43db      	mvns	r3, r3
 800016e:	0a1b      	lsrs	r3, r3, #8
 8000170:	f003 0307 	and.w	r3, r3, #7
 8000174:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	f1c3 0304 	rsb	r3, r3, #4
 800017c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	697b      	ldr	r3, [r7, #20]
 8000182:	fa22 f303 	lsr.w	r3, r2, r3
 8000186:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	785b      	ldrb	r3, [r3, #1]
 800018c:	461a      	mov	r2, r3
 800018e:	693b      	ldr	r3, [r7, #16]
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	789b      	ldrb	r3, [r3, #2]
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	697a      	ldr	r2, [r7, #20]
 80001a2:	4313      	orrs	r3, r2
 80001a4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001ac:	4a17      	ldr	r2, [pc, #92]	; (800020c <NVIC_Init+0xc0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	6979      	ldr	r1, [r7, #20]
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	4413      	add	r3, r2
 80001b8:	460a      	mov	r2, r1
 80001ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <NVIC_Init+0xc0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	095b      	lsrs	r3, r3, #5
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	f003 031f 	and.w	r3, r3, #31
 80001d2:	2101      	movs	r1, #1
 80001d4:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001dc:	e00f      	b.n	80001fe <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001de:	490b      	ldr	r1, [pc, #44]	; (800020c <NVIC_Init+0xc0>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	095b      	lsrs	r3, r3, #5
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	2201      	movs	r2, #1
 80001f4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f6:	f100 0320 	add.w	r3, r0, #32
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001fe:	bf00      	nop
 8000200:	371c      	adds	r7, #28
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	e000ed00 	.word	0xe000ed00
 800020c:	e000e100 	.word	0xe000e100

08000210 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800021c:	4b34      	ldr	r3, [pc, #208]	; (80002f0 <EXTI_Init+0xe0>)
 800021e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	799b      	ldrb	r3, [r3, #6]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d04f      	beq.n	80002c8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000228:	4931      	ldr	r1, [pc, #196]	; (80002f0 <EXTI_Init+0xe0>)
 800022a:	4b31      	ldr	r3, [pc, #196]	; (80002f0 <EXTI_Init+0xe0>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	43db      	mvns	r3, r3
 8000234:	4013      	ands	r3, r2
 8000236:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000238:	492d      	ldr	r1, [pc, #180]	; (80002f0 <EXTI_Init+0xe0>)
 800023a:	4b2d      	ldr	r3, [pc, #180]	; (80002f0 <EXTI_Init+0xe0>)
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	43db      	mvns	r3, r3
 8000244:	4013      	ands	r3, r2
 8000246:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	791b      	ldrb	r3, [r3, #4]
 800024c:	461a      	mov	r2, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	4413      	add	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	6811      	ldr	r1, [r2, #0]
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	6812      	ldr	r2, [r2, #0]
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000262:	4923      	ldr	r1, [pc, #140]	; (80002f0 <EXTI_Init+0xe0>)
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <EXTI_Init+0xe0>)
 8000266:	689a      	ldr	r2, [r3, #8]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	43db      	mvns	r3, r3
 800026e:	4013      	ands	r3, r2
 8000270:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000272:	491f      	ldr	r1, [pc, #124]	; (80002f0 <EXTI_Init+0xe0>)
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <EXTI_Init+0xe0>)
 8000276:	68da      	ldr	r2, [r3, #12]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	43db      	mvns	r3, r3
 800027e:	4013      	ands	r3, r2
 8000280:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	795b      	ldrb	r3, [r3, #5]
 8000286:	2b10      	cmp	r3, #16
 8000288:	d10e      	bne.n	80002a8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800028a:	4919      	ldr	r1, [pc, #100]	; (80002f0 <EXTI_Init+0xe0>)
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <EXTI_Init+0xe0>)
 800028e:	689a      	ldr	r2, [r3, #8]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4313      	orrs	r3, r2
 8000296:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000298:	4915      	ldr	r1, [pc, #84]	; (80002f0 <EXTI_Init+0xe0>)
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <EXTI_Init+0xe0>)
 800029c:	68da      	ldr	r2, [r3, #12]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4313      	orrs	r3, r2
 80002a4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002a6:	e01d      	b.n	80002e4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <EXTI_Init+0xe0>)
 80002aa:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	795b      	ldrb	r3, [r3, #5]
 80002b0:	461a      	mov	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	4413      	add	r3, r2
 80002b6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68fa      	ldr	r2, [r7, #12]
 80002bc:	6811      	ldr	r1, [r2, #0]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	6812      	ldr	r2, [r2, #0]
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	e00d      	b.n	80002e4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	461a      	mov	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	4413      	add	r3, r2
 80002d2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	6811      	ldr	r1, [r2, #0]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	6812      	ldr	r2, [r2, #0]
 80002de:	43d2      	mvns	r2, r2
 80002e0:	400a      	ands	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40010400 	.word	0x40010400

080002f4 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80002fc:	2300      	movs	r3, #0
 80002fe:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <EXTI_GetITStatus+0x44>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4013      	ands	r3, r2
 800030c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <EXTI_GetITStatus+0x44>)
 8000310:	695a      	ldr	r2, [r3, #20]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4013      	ands	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d005      	beq.n	8000326 <EXTI_GetITStatus+0x32>
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000320:	2301      	movs	r3, #1
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	e001      	b.n	800032a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800032a:	7bfb      	ldrb	r3, [r7, #15]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400

0800033c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000344:	4a03      	ldr	r2, [pc, #12]	; (8000354 <EXTI_ClearITPendingBit+0x18>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	6153      	str	r3, [r2, #20]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	40010400 	.word	0x40010400

08000358 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000358:	b480      	push	{r7}
 800035a:	b089      	sub	sp, #36	; 0x24
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	78db      	ldrb	r3, [r3, #3]
 800037e:	f003 030f 	and.w	r3, r3, #15
 8000382:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	78db      	ldrb	r3, [r3, #3]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	2b00      	cmp	r3, #0
 800038e:	d005      	beq.n	800039c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	789b      	ldrb	r3, [r3, #2]
 8000394:	461a      	mov	r2, r3
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	4313      	orrs	r3, r2
 800039a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d044      	beq.n	8000430 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
 80003b0:	e038      	b.n	8000424 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80003b2:	2201      	movs	r2, #1
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4013      	ands	r3, r2
 80003c6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003c8:	693a      	ldr	r2, [r7, #16]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d126      	bne.n	800041e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003d6:	220f      	movs	r2, #15
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	43db      	mvns	r3, r3
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	4013      	ands	r3, r2
 80003e8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003ea:	69fa      	ldr	r2, [r7, #28]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	78db      	ldrb	r3, [r3, #3]
 80003fc:	2b28      	cmp	r3, #40	; 0x28
 80003fe:	d105      	bne.n	800040c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000400:	2201      	movs	r2, #1
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	409a      	lsls	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	615a      	str	r2, [r3, #20]
 800040a:	e008      	b.n	800041e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	78db      	ldrb	r3, [r3, #3]
 8000410:	2b48      	cmp	r3, #72	; 0x48
 8000412:	d104      	bne.n	800041e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000414:	2201      	movs	r2, #1
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	409a      	lsls	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	3301      	adds	r3, #1
 8000422:	61bb      	str	r3, [r7, #24]
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	2b07      	cmp	r3, #7
 8000428:	d9c3      	bls.n	80003b2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	2bff      	cmp	r3, #255	; 0xff
 8000436:	d946      	bls.n	80004c6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
 8000442:	e03a      	b.n	80004ba <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	3308      	adds	r3, #8
 8000448:	2201      	movs	r2, #1
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	4013      	ands	r3, r2
 800045a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800045c:	693a      	ldr	r2, [r7, #16]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	429a      	cmp	r2, r3
 8000462:	d127      	bne.n	80004b4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000464:	69bb      	ldr	r3, [r7, #24]
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800046a:	220f      	movs	r2, #15
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	43db      	mvns	r3, r3
 8000478:	697a      	ldr	r2, [r7, #20]
 800047a:	4013      	ands	r3, r2
 800047c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800047e:	69fa      	ldr	r2, [r7, #28]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	697a      	ldr	r2, [r7, #20]
 8000488:	4313      	orrs	r3, r2
 800048a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	78db      	ldrb	r3, [r3, #3]
 8000490:	2b28      	cmp	r3, #40	; 0x28
 8000492:	d105      	bne.n	80004a0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000494:	69bb      	ldr	r3, [r7, #24]
 8000496:	3308      	adds	r3, #8
 8000498:	2201      	movs	r2, #1
 800049a:	409a      	lsls	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	78db      	ldrb	r3, [r3, #3]
 80004a4:	2b48      	cmp	r3, #72	; 0x48
 80004a6:	d105      	bne.n	80004b4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	3308      	adds	r3, #8
 80004ac:	2201      	movs	r2, #1
 80004ae:	409a      	lsls	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	3301      	adds	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d9c1      	bls.n	8000444 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	697a      	ldr	r2, [r7, #20]
 80004c4:	605a      	str	r2, [r3, #4]
  }
}
 80004c6:	bf00      	nop
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004de:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2202      	movs	r2, #2
 80004e4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2204      	movs	r2, #4
 80004ea:	70da      	strb	r2, [r3, #3]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	460b      	mov	r3, r1
 8000500:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000502:	887a      	ldrh	r2, [r7, #2]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	611a      	str	r2, [r3, #16]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	460b      	mov	r3, r1
 800051c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800051e:	887a      	ldrh	r2, [r7, #2]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	615a      	str	r2, [r3, #20]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000530:	b490      	push	{r4, r7}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	460a      	mov	r2, r1
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	4613      	mov	r3, r2
 800053e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	f003 0303 	and.w	r3, r3, #3
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	220f      	movs	r2, #15
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000554:	4916      	ldr	r1, [pc, #88]	; (80005b0 <GPIO_EXTILineConfig+0x80>)
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	089b      	lsrs	r3, r3, #2
 800055a:	b2db      	uxtb	r3, r3
 800055c:	4618      	mov	r0, r3
 800055e:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <GPIO_EXTILineConfig+0x80>)
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	089b      	lsrs	r3, r3, #2
 8000564:	b2db      	uxtb	r3, r3
 8000566:	3302      	adds	r3, #2
 8000568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	43db      	mvns	r3, r3
 8000570:	401a      	ands	r2, r3
 8000572:	1c83      	adds	r3, r0, #2
 8000574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <GPIO_EXTILineConfig+0x80>)
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	089b      	lsrs	r3, r3, #2
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461c      	mov	r4, r3
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <GPIO_EXTILineConfig+0x80>)
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	089b      	lsrs	r3, r3, #2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	3302      	adds	r3, #2
 800058c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000590:	79f9      	ldrb	r1, [r7, #7]
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	f003 0303 	and.w	r3, r3, #3
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	431a      	orrs	r2, r3
 80005a0:	1ca3      	adds	r3, r4, #2
 80005a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc90      	pop	{r4, r7}
 80005ae:	4770      	bx	lr
 80005b0:	40010000 	.word	0x40010000

080005b4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80005cc:	4b4c      	ldr	r3, [pc, #304]	; (8000700 <RCC_GetClocksFreq+0x14c>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f003 030c 	and.w	r3, r3, #12
 80005d4:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d007      	beq.n	80005ec <RCC_GetClocksFreq+0x38>
 80005dc:	2b08      	cmp	r3, #8
 80005de:	d009      	beq.n	80005f4 <RCC_GetClocksFreq+0x40>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d133      	bne.n	800064c <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a47      	ldr	r2, [pc, #284]	; (8000704 <RCC_GetClocksFreq+0x150>)
 80005e8:	601a      	str	r2, [r3, #0]
      break;
 80005ea:	e033      	b.n	8000654 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a45      	ldr	r2, [pc, #276]	; (8000704 <RCC_GetClocksFreq+0x150>)
 80005f0:	601a      	str	r2, [r3, #0]
      break;
 80005f2:	e02f      	b.n	8000654 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <RCC_GetClocksFreq+0x14c>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80005fc:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80005fe:	4b40      	ldr	r3, [pc, #256]	; (8000700 <RCC_GetClocksFreq+0x14c>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000606:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	0c9b      	lsrs	r3, r3, #18
 800060c:	3302      	adds	r3, #2
 800060e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d106      	bne.n	8000624 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	4a3b      	ldr	r2, [pc, #236]	; (8000708 <RCC_GetClocksFreq+0x154>)
 800061a:	fb02 f203 	mul.w	r2, r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000622:	e017      	b.n	8000654 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <RCC_GetClocksFreq+0x14c>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	4a35      	ldr	r2, [pc, #212]	; (8000708 <RCC_GetClocksFreq+0x154>)
 8000634:	fb02 f203 	mul.w	r2, r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
      break;
 800063c:	e00a      	b.n	8000654 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	4a30      	ldr	r2, [pc, #192]	; (8000704 <RCC_GetClocksFreq+0x150>)
 8000642:	fb02 f203 	mul.w	r2, r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
      break;
 800064a:	e003      	b.n	8000654 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <RCC_GetClocksFreq+0x150>)
 8000650:	601a      	str	r2, [r3, #0]
      break;
 8000652:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <RCC_GetClocksFreq+0x14c>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800065c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <RCC_GetClocksFreq+0x158>)
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	40da      	lsrs	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800067c:	4b20      	ldr	r3, [pc, #128]	; (8000700 <RCC_GetClocksFreq+0x14c>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000684:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800068c:	4a1f      	ldr	r2, [pc, #124]	; (800070c <RCC_GetClocksFreq+0x158>)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	40da      	lsrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <RCC_GetClocksFreq+0x14c>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80006ac:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	0adb      	lsrs	r3, r3, #11
 80006b2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <RCC_GetClocksFreq+0x158>)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	40da      	lsrs	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <RCC_GetClocksFreq+0x14c>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	0b9b      	lsrs	r3, r3, #14
 80006da:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80006dc:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <RCC_GetClocksFreq+0x15c>)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68da      	ldr	r2, [r3, #12]
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	611a      	str	r2, [r3, #16]
}
 80006f6:	bf00      	nop
 80006f8:	371c      	adds	r7, #28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000
 8000704:	007a1200 	.word	0x007a1200
 8000708:	003d0900 	.word	0x003d0900
 800070c:	20000000 	.word	0x20000000
 8000710:	20000010 	.word	0x20000010

08000714 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d006      	beq.n	8000734 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000726:	4909      	ldr	r1, [pc, #36]	; (800074c <RCC_APB2PeriphClockCmd+0x38>)
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <RCC_APB2PeriphClockCmd+0x38>)
 800072a:	699a      	ldr	r2, [r3, #24]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4313      	orrs	r3, r2
 8000730:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000732:	e006      	b.n	8000742 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000734:	4905      	ldr	r1, [pc, #20]	; (800074c <RCC_APB2PeriphClockCmd+0x38>)
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <RCC_APB2PeriphClockCmd+0x38>)
 8000738:	699a      	ldr	r2, [r3, #24]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	43db      	mvns	r3, r3
 800073e:	4013      	ands	r3, r2
 8000740:	618b      	str	r3, [r1, #24]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	40021000 	.word	0x40021000

08000750 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d006      	beq.n	8000770 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000762:	4909      	ldr	r1, [pc, #36]	; (8000788 <RCC_APB1PeriphClockCmd+0x38>)
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <RCC_APB1PeriphClockCmd+0x38>)
 8000766:	69da      	ldr	r2, [r3, #28]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4313      	orrs	r3, r2
 800076c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800076e:	e006      	b.n	800077e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000770:	4905      	ldr	r1, [pc, #20]	; (8000788 <RCC_APB1PeriphClockCmd+0x38>)
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <RCC_APB1PeriphClockCmd+0x38>)
 8000774:	69da      	ldr	r2, [r3, #28]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	43db      	mvns	r3, r3
 800077a:	4013      	ands	r3, r2
 800077c:	61cb      	str	r3, [r1, #28]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000

0800078c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	8a1b      	ldrh	r3, [r3, #16]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80007b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007b8:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80007bc:	4013      	ands	r3, r2
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	88db      	ldrh	r3, [r3, #6]
 80007c4:	461a      	mov	r2, r3
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	4313      	orrs	r3, r2
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	899b      	ldrh	r3, [r3, #12]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80007dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007de:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80007e2:	4013      	ands	r3, r2
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	889a      	ldrh	r2, [r3, #4]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	891b      	ldrh	r3, [r3, #8]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fe:	4313      	orrs	r3, r2
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000804:	b29a      	uxth	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	8a9b      	ldrh	r3, [r3, #20]
 800080e:	b29b      	uxth	r3, r3
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000814:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000818:	4013      	ands	r3, r2
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	899b      	ldrh	r3, [r3, #12]
 8000820:	461a      	mov	r2, r3
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	4313      	orrs	r3, r2
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082a:	b29a      	uxth	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff febd 	bl	80005b4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	4a2e      	ldr	r2, [pc, #184]	; (80008f8 <USART_Init+0x16c>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d102      	bne.n	8000848 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
 8000846:	e001      	b.n	800084c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	899b      	ldrh	r3, [r3, #12]
 8000850:	b29b      	uxth	r3, r3
 8000852:	b21b      	sxth	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	da0c      	bge.n	8000872 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	009a      	lsls	r2, r3, #2
 8000862:	441a      	add	r2, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
 8000870:	e00b      	b.n	800088a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	009a      	lsls	r2, r3, #2
 800087c:	441a      	add	r2, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	fbb2 f3f3 	udiv	r3, r2, r3
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <USART_Init+0x170>)
 800088e:	fba2 2303 	umull	r2, r3, r2, r3
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	011b      	lsls	r3, r3, #4
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	2264      	movs	r2, #100	; 0x64
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	899b      	ldrh	r3, [r3, #12]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	da0c      	bge.n	80008ce <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80008b4:	6a3b      	ldr	r3, [r7, #32]
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	3332      	adds	r3, #50	; 0x32
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <USART_Init+0x170>)
 80008bc:	fba2 2303 	umull	r2, r3, r2, r3
 80008c0:	095b      	lsrs	r3, r3, #5
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c8:	4313      	orrs	r3, r2
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008cc:	e00b      	b.n	80008e6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	3332      	adds	r3, #50	; 0x32
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <USART_Init+0x170>)
 80008d6:	fba2 2303 	umull	r2, r3, r2, r3
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	f003 030f 	and.w	r3, r3, #15
 80008e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008e2:	4313      	orrs	r3, r2
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80008e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	811a      	strh	r2, [r3, #8]
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40013800 	.word	0x40013800
 80008fc:	51eb851f 	.word	0x51eb851f

08000900 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800090e:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	220c      	movs	r2, #12
 8000926:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	819a      	strh	r2, [r3, #12]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d008      	beq.n	800095c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	899b      	ldrh	r3, [r3, #12]
 800094e:	b29b      	uxth	r3, r3
 8000950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000954:	b29a      	uxth	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800095a:	e007      	b.n	800096c <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	899b      	ldrh	r3, [r3, #12]
 8000960:	b29b      	uxth	r3, r3
 8000962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000966:	b29a      	uxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	819a      	strh	r2, [r3, #12]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000988:	b29a      	uxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	809a      	strh	r2, [r3, #4]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	887b      	ldrh	r3, [r7, #2]
 80009b0:	4013      	ands	r3, r2
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80009b8:	2301      	movs	r3, #1
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e001      	b.n	80009c2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
	...

080009d0 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  
  /* Enable the GPIO Clock */
  RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 80009e0:	2310      	movs	r3, #16
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	2101      	movs	r1, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe93 	bl	8000714 <RCC_APB2PeriphClockCmd>
  
  /* Configure Button pin as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80009ee:	2304      	movs	r3, #4
 80009f0:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	82bb      	strh	r3, [r7, #20]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <STM_EVAL_PBInit+0x8c>)
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	f107 0214 	add.w	r2, r7, #20
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fca6 	bl	8000358 <GPIO_Init>


  if (Button_Mode == BUTTON_MODE_EXTI)
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d120      	bne.n	8000a54 <STM_EVAL_PBInit+0x84>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000a12:	2302      	movs	r3, #2
 8000a14:	220d      	movs	r2, #13
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fd89 	bl	8000530 <GPIO_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8000a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a22:	60fb      	str	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000a24:	2300      	movs	r3, #0
 8000a26:	743b      	strb	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8000a28:	2308      	movs	r3, #8
 8000a2a:	747b      	strb	r3, [r7, #17]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	74bb      	strb	r3, [r7, #18]
    EXTI_Init(&EXTI_InitStructure);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fbeb 	bl	8000210 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000a3a:	2328      	movs	r3, #40	; 0x28
 8000a3c:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000a42:	230f      	movs	r3, #15
 8000a44:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000a46:	2301      	movs	r3, #1
 8000a48:	72fb      	strb	r3, [r7, #11]

    NVIC_Init(&NVIC_InitStructure); 
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fb7c 	bl	800014c <NVIC_Init>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000014 	.word	0x20000014

08000a60 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da0b      	bge.n	8000a8c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000a74:	490d      	ldr	r1, [pc, #52]	; (8000aac <NVIC_SetPriority+0x4c>)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 030f 	and.w	r3, r3, #15
 8000a7c:	3b04      	subs	r3, #4
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000a8a:	e009      	b.n	8000aa0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000a8c:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <NVIC_SetPriority+0x50>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac2:	d301      	bcc.n	8000ac8 <SysTick_Config+0x14>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e011      	b.n	8000aec <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SysTick_Config+0x40>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ada:	f7ff ffc1 	bl	8000a60 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SysTick_Config+0x40>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <SysTick_Config+0x40>)
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */  
  
  /* SysTick end of count event each 1ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 8000afe:	4836      	ldr	r0, [pc, #216]	; (8000bd8 <main+0xe0>)
 8000b00:	f7ff fd58 	bl	80005b4 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000b04:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <main+0xe0>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a34      	ldr	r2, [pc, #208]	; (8000bdc <main+0xe4>)
 8000b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0e:	099b      	lsrs	r3, r3, #6
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ffcf 	bl	8000ab4 <SysTick_Config>
  



  CONFIG_OUTPUT_PIN(RCC_APB2Periph_GPIOA,GPIOA,GPIO_Pin_5);
 8000b16:	2101      	movs	r1, #1
 8000b18:	2004      	movs	r0, #4
 8000b1a:	f7ff fdfb 	bl	8000714 <RCC_APB2PeriphClockCmd>
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fcd4 	bl	80004d0 <GPIO_StructInit>
 8000b28:	2320      	movs	r3, #32
 8000b2a:	82bb      	strh	r3, [r7, #20]
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	75fb      	strb	r3, [r7, #23]
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	482a      	ldr	r0, [pc, #168]	; (8000be0 <main+0xe8>)
 8000b38:	f7ff fc0e 	bl	8000358 <GPIO_Init>


	// USART2
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fde8 	bl	8000714 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000b44:	2101      	movs	r1, #1
 8000b46:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b4a:	f7ff fe01 	bl	8000750 <RCC_APB1PeriphClockCmd>
	GPIO_InitTypeDef gpio;
	GPIO_StructInit(&gpio);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fcbc 	bl	80004d0 <GPIO_StructInit>
	gpio.GPIO_Pin = GPIO_Pin_2;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	823b      	strh	r3, [r7, #16]
	gpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8000b5c:	2318      	movs	r3, #24
 8000b5e:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(GPIOA, &gpio);
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <main+0xe8>)
 8000b68:	f7ff fbf6 	bl	8000358 <GPIO_Init>
	gpio.GPIO_Pin = GPIO_Pin_3;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	823b      	strh	r3, [r7, #16]
	gpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000b70:	2304      	movs	r3, #4
 8000b72:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(GPIOA, &gpio);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4819      	ldr	r0, [pc, #100]	; (8000be0 <main+0xe8>)
 8000b7c:	f7ff fbec 	bl	8000358 <GPIO_Init>
	USART_InitTypeDef uart;
	USART_StructInit(&uart);
 8000b80:	463b      	mov	r3, r7
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff febc 	bl	8000900 <USART_StructInit>
	uart.USART_BaudRate = 115200;
 8000b88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b8c:	603b      	str	r3, [r7, #0]
	USART_Init(USART2, &uart);
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4619      	mov	r1, r3
 8000b92:	4814      	ldr	r0, [pc, #80]	; (8000be4 <main+0xec>)
 8000b94:	f7ff fdfa 	bl	800078c <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <main+0xec>)
 8000b9c:	f7ff fecc 	bl	8000938 <USART_Cmd>


  /* Initialize User_Button on STM32NUCLEO */
  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);   
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ff14 	bl	80009d0 <STM_EVAL_PBInit>
  
  /* Initiate Blink Speed variable */ 
  BlinkSpeed = 0;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <main+0xf0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
  while (1){
	  //if(PBPressedEventFlag != 0){
		  //STM_EVAL_LEDToggle(LED2);
		  //PBPressedEventFlag = 0;
	  //}
	  send_char((char)'r');
 8000bae:	2072      	movs	r0, #114	; 0x72
 8000bb0:	f000 f842 	bl	8000c38 <send_char>
	  GPIO_SetBits(GPIOA, GPIO_Pin_5);
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	480a      	ldr	r0, [pc, #40]	; (8000be0 <main+0xe8>)
 8000bb8:	f7ff fc9d 	bl	80004f6 <GPIO_SetBits>
	  Delay(500);
 8000bbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc0:	f000 f814 	bl	8000bec <Delay>
	  GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	4806      	ldr	r0, [pc, #24]	; (8000be0 <main+0xe8>)
 8000bc8:	f7ff fca3 	bl	8000512 <GPIO_ResetBits>
	  Delay(500);
 8000bcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd0:	f000 f80c 	bl	8000bec <Delay>
  while (1){
 8000bd4:	e7eb      	b.n	8000bae <main+0xb6>
 8000bd6:	bf00      	nop
 8000bd8:	2000003c 	.word	0x2000003c
 8000bdc:	10624dd3 	.word	0x10624dd3
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40004400 	.word	0x40004400
 8000be8:	20000038 	.word	0x20000038

08000bec <Delay>:
* @brief  Inserts a delay time.
* @param  nTime: specifies the delay time length, in 1 ms.
* @retval None
*/
void Delay(__IO uint32_t nTime)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <Delay+0x24>)
 8000bf8:	6013      	str	r3, [r2, #0]
  
  while(TimingDelay != 0);
 8000bfa:	bf00      	nop
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <Delay+0x24>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1fb      	bne.n	8000bfc <Delay+0x10>
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000034 	.word	0x20000034

08000c14 <TimingDelay_Decrement>:
* @brief  Decrements the TimingDelay variable.
* @param  None
* @retval None
*/
void TimingDelay_Decrement(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <TimingDelay_Decrement+0x20>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d004      	beq.n	8000c2a <TimingDelay_Decrement+0x16>
  { 
    TimingDelay--;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <TimingDelay_Decrement+0x20>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <TimingDelay_Decrement+0x20>)
 8000c28:	6013      	str	r3, [r2, #0]
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000034 	.word	0x20000034

08000c38 <send_char>:

void send_char(char c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
    while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
 8000c42:	bf00      	nop
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <send_char+0x30>)
 8000c48:	f7ff fea6 	bl	8000998 <USART_GetFlagStatus>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f8      	beq.n	8000c44 <send_char+0xc>
    USART_SendData(USART2, c);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <send_char+0x30>)
 8000c5a:	f7ff fe8c 	bl	8000976 <USART_SendData>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004400 	.word	0x40004400

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c72:	e003      	b.n	8000c7c <LoopCopyDataInit>

08000c74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000c76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c7a:	3104      	adds	r1, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000c80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c84:	d3f6      	bcc.n	8000c74 <CopyDataInit>
	ldr	r2, =_sbss
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000c88:	e002      	b.n	8000c90 <LoopFillZerobss>

08000c8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c8c:	f842 3b04 	str.w	r3, [r2], #4

08000c90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000c92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c94:	d3f9      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c96:	f000 f851 	bl	8000d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f000 f8df 	bl	8000e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff ff2b 	bl	8000af8 <main>
	bx	lr
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ca4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000ca8:	08000ec4 	.word	0x08000ec4
	ldr	r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cb0:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8000cb4:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8000cb8:	20000050 	.word	0x20000050

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>

08000cbe <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8000d0a:	f7ff ff83 	bl	8000c14 <TimingDelay_Decrement>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET)
 8000d18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d1c:	f7ff faea 	bl	80002f4 <EXTI_GetITStatus>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d006      	beq.n	8000d34 <EXTI15_10_IRQHandler+0x20>
  {		
	PBPressedEventFlag = 1;
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <EXTI15_10_IRQHandler+0x24>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8000d2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d30:	f7ff fb04 	bl	800033c <EXTI_ClearITPendingBit>
  }	
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000039 	.word	0x20000039

08000d3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d40:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <SystemInit+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <SystemInit+0x5c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Reset SW,SWS, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000d4c:	4912      	ldr	r1, [pc, #72]	; (8000d98 <SystemInit+0x5c>)
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SystemInit+0x5c>)
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <SystemInit+0x60>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <SystemInit+0x5c>)
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <SystemInit+0x5c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d66:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <SystemInit+0x5c>)
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <SystemInit+0x5c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d72:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <SystemInit+0x5c>)
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SystemInit+0x5c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000d7e:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SystemInit+0x5c>)
 8000d82:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d86:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000d88:	f000 f80c 	bl	8000da4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SystemInit+0x64>)
 8000d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d92:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	f8ff0000 	.word	0xf8ff0000
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <SetSysClock>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
  
 #ifdef PLL_SOURCE_HSI  
  /* At this stage the HSI is already enabled */
  
  /*  PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL));
 8000db2:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <SetSysClock+0xb0>)
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <SetSysClock+0xb0>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000dbc:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLMULL16);
 8000dbe:	4a25      	ldr	r2, [pc, #148]	; (8000e54 <SetSysClock+0xb0>)
 8000dc0:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <SetSysClock+0xb0>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000dc8:	6053      	str	r3, [r2, #4]
  }
  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <SetSysClock+0xb4>)
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <SetSysClock+0xb4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f043 0310 	orr.w	r3, r3, #16
 8000dd4:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000dd6:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <SetSysClock+0xb4>)
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <SetSysClock+0xb4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 0303 	bic.w	r3, r3, #3
 8000de0:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000de2:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <SetSysClock+0xb4>)
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <SetSysClock+0xb4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000dee:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <SetSysClock+0xb0>)
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <SetSysClock+0xb0>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000df6:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <SetSysClock+0xb0>)
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <SetSysClock+0xb0>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <SetSysClock+0xb0>)
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <SetSysClock+0xb0>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e08:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <SetSysClock+0xb0>)
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <SetSysClock+0xb0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e14:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e16:	bf00      	nop
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <SetSysClock+0xb0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f9      	beq.n	8000e18 <SetSysClock+0x74>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <SetSysClock+0xb0>)
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <SetSysClock+0xb0>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <SetSysClock+0xb0>)
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <SetSysClock+0xb0>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000e3c:	bf00      	nop
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SetSysClock+0xb0>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d1f9      	bne.n	8000e3e <SetSysClock+0x9a>
    {
    }
  }
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40022000 	.word	0x40022000

08000e5c <__libc_init_array>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	2500      	movs	r5, #0
 8000e60:	4e0c      	ldr	r6, [pc, #48]	; (8000e94 <__libc_init_array+0x38>)
 8000e62:	4c0d      	ldr	r4, [pc, #52]	; (8000e98 <__libc_init_array+0x3c>)
 8000e64:	1ba4      	subs	r4, r4, r6
 8000e66:	10a4      	asrs	r4, r4, #2
 8000e68:	42a5      	cmp	r5, r4
 8000e6a:	d109      	bne.n	8000e80 <__libc_init_array+0x24>
 8000e6c:	f000 f81a 	bl	8000ea4 <_init>
 8000e70:	2500      	movs	r5, #0
 8000e72:	4e0a      	ldr	r6, [pc, #40]	; (8000e9c <__libc_init_array+0x40>)
 8000e74:	4c0a      	ldr	r4, [pc, #40]	; (8000ea0 <__libc_init_array+0x44>)
 8000e76:	1ba4      	subs	r4, r4, r6
 8000e78:	10a4      	asrs	r4, r4, #2
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d105      	bne.n	8000e8a <__libc_init_array+0x2e>
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e84:	4798      	blx	r3
 8000e86:	3501      	adds	r5, #1
 8000e88:	e7ee      	b.n	8000e68 <__libc_init_array+0xc>
 8000e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e8e:	4798      	blx	r3
 8000e90:	3501      	adds	r5, #1
 8000e92:	e7f2      	b.n	8000e7a <__libc_init_array+0x1e>
 8000e94:	08000ebc 	.word	0x08000ebc
 8000e98:	08000ebc 	.word	0x08000ebc
 8000e9c:	08000ebc 	.word	0x08000ebc
 8000ea0:	08000ec0 	.word	0x08000ec0

08000ea4 <_init>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr

08000eb0 <_fini>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr
