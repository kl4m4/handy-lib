
empty_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000424  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000530  08000530  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000534  08000534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000014  0800054c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000030  0800054c  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000d23  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000004a8  00000000  00000000  00020d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000138  00000000  00000000  00021208  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00021340  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000a01  00000000  00000000  00021420  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000004cf  00000000  00000000  00021e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000222f0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000002b4  00000000  00000000  0002236c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00022620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08000518 	.word	0x08000518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08000518 	.word	0x08000518

0800014c <CustomInit>:
/**
  * @brief  Configures all the hardware for custom needs
  * @param  None
  * @retval None
  */
void CustomInit(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	CustomClockConfigHSI64();
 8000150:	f000 f804 	bl	800015c <CustomClockConfigHSI64>
	CustomGPIOConfig();
 8000154:	f000 f862 	bl	800021c <CustomGPIOConfig>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <CustomClockConfigHSI64>:
  * so that SYSCLK = HCLK = PCLK2 = APB2CLK = 64MHz
  * and PCLK1 = APB1CLK = 32MHz
  * @param  None
  * @retval None
  */
void CustomClockConfigHSI64(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	//  -------------------------------------------------------------
	// HSI - already on by default

	//  --------- PLL configuration -----------
	// PLL - select PLL multiplier
	RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 8000160:	4a2c      	ldr	r2, [pc, #176]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 8000162:	4b2c      	ldr	r3, [pc, #176]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 8000164:	685b      	ldr	r3, [r3, #4]
 8000166:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800016a:	6053      	str	r3, [r2, #4]
	// all bits set = multiplier x16
	RCC->CFGR |= (RCC_CFGR_PLLMULL_0 | RCC_CFGR_PLLMULL_1 | RCC_CFGR_PLLMULL_2 | RCC_CFGR_PLLMULL_3);
 800016c:	4a29      	ldr	r2, [pc, #164]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 800016e:	4b29      	ldr	r3, [pc, #164]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 8000170:	685b      	ldr	r3, [r3, #4]
 8000172:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 8000176:	6053      	str	r3, [r2, #4]
	// PLL - select PLL source
	// bit cleared = HSI/2 set as input
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 8000178:	4a26      	ldr	r2, [pc, #152]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 800017a:	4b26      	ldr	r3, [pc, #152]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 800017c:	685b      	ldr	r3, [r3, #4]
 800017e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000182:	6053      	str	r3, [r2, #4]
	// PLL - switch on
	RCC->CR |= RCC_CR_PLLON;
 8000184:	4a23      	ldr	r2, [pc, #140]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 8000186:	4b23      	ldr	r3, [pc, #140]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800018e:	6013      	str	r3, [r2, #0]
	// Wait till PLL is locked
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8000190:	bf00      	nop
 8000192:	4b20      	ldr	r3, [pc, #128]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800019a:	2b00      	cmp	r3, #0
 800019c:	d0f9      	beq.n	8000192 <CustomClockConfigHSI64+0x36>

	//  --------- FLASH latency adjustment -----------
	// apparently required
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800019e:	4a1e      	ldr	r2, [pc, #120]	; (8000218 <CustomClockConfigHSI64+0xbc>)
 80001a0:	4b1d      	ldr	r3, [pc, #116]	; (8000218 <CustomClockConfigHSI64+0xbc>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f023 0303 	bic.w	r3, r3, #3
 80001a8:	6013      	str	r3, [r2, #0]
	// according to doc.: 010 Two wait states, if 48 MHz < SYSCLK <= 72 MHz
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 80001aa:	4a1b      	ldr	r2, [pc, #108]	; (8000218 <CustomClockConfigHSI64+0xbc>)
 80001ac:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <CustomClockConfigHSI64+0xbc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f043 0302 	orr.w	r3, r3, #2
 80001b4:	6013      	str	r3, [r2, #0]

	//  --------- prescalers configuration -----------
	// AHB prescaler - all bits cleared - no prescaling
	RCC->CFGR &= ~RCC_CFGR_HPRE;
 80001b6:	4a17      	ldr	r2, [pc, #92]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001c0:	6053      	str	r3, [r2, #4]
	// APB1 prescaler - /2 division
	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 80001c2:	4a14      	ldr	r2, [pc, #80]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001cc:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80001ce:	4a11      	ldr	r2, [pc, #68]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001d0:	4b10      	ldr	r3, [pc, #64]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001d8:	6053      	str	r3, [r2, #4]
	// APB2 prescaler - bits cleared - no division
	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 80001da:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001dc:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80001e4:	6053      	str	r3, [r2, #4]

	//  --------- Set PLL as clock source -----------
	RCC->CFGR &= ~RCC_CFGR_SW;
 80001e6:	4a0b      	ldr	r2, [pc, #44]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	f023 0303 	bic.w	r3, r3, #3
 80001f0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80001f2:	4a08      	ldr	r2, [pc, #32]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	f043 0302 	orr.w	r3, r3, #2
 80001fc:	6053      	str	r3, [r2, #4]
    //RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    //RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
	// Wait till PLL is really used as closk source
	while((RCC->CFGR & RCC_CFGR_SWS  )!= RCC_CFGR_SWS_PLL){}
 80001fe:	bf00      	nop
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <CustomClockConfigHSI64+0xb8>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	f003 030c 	and.w	r3, r3, #12
 8000208:	2b08      	cmp	r3, #8
 800020a:	d1f9      	bne.n	8000200 <CustomClockConfigHSI64+0xa4>

	// update SystemCoreClock variable
	SystemCoreClockUpdate();
 800020c:	f000 f8ee 	bl	80003ec <SystemCoreClockUpdate>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40021000 	.word	0x40021000
 8000218:	40022000 	.word	0x40022000

0800021c <CustomGPIOConfig>:
/**
  * @brief  Configures the GPIOs, its APB clocks, and interrupts
  * @param  None
  * @retval None
  */
void CustomGPIOConfig(void){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	//  -------------------------------------------------------------
	//  ------------- GPIO port config (port C @APB2) ---------------
	//  -------------------------------------------------------------

	//  --------- Clock for GPIO port C (APB2) -----------
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000220:	4a1f      	ldr	r2, [pc, #124]	; (80002a0 <CustomGPIOConfig+0x84>)
 8000222:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <CustomGPIOConfig+0x84>)
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	f043 0310 	orr.w	r3, r3, #16
 800022a:	6193      	str	r3, [r2, #24]

	//  --------- Pin mode - both bits cleared - input mode -----------
	GPIOC->CRH &= ~GPIO_CRH_MODE13;
 800022c:	4a1d      	ldr	r2, [pc, #116]	; (80002a4 <CustomGPIOConfig+0x88>)
 800022e:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <CustomGPIOConfig+0x88>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000236:	6053      	str	r3, [r2, #4]

	//  -------------- Pin config - 01 - floating input ---------------
	GPIOC->CRH &= ~GPIO_CRH_CNF13;
 8000238:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <CustomGPIOConfig+0x88>)
 800023a:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <CustomGPIOConfig+0x88>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000242:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_CNF13_0;
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <CustomGPIOConfig+0x88>)
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <CustomGPIOConfig+0x88>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800024e:	6053      	str	r3, [r2, #4]
	//  -------------------------------------------------------------
	//  ---------------- AFIO for interrupt config ------------------
	//  -------------------------------------------------------------

	//  -------- Clock for AFIO interface (APB2) ---------
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000250:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <CustomGPIOConfig+0x84>)
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <CustomGPIOConfig+0x84>)
 8000254:	699b      	ldr	r3, [r3, #24]
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6193      	str	r3, [r2, #24]

	// -------- Select and configure EXTI13 line ---------
	// -------- in EXTICR4 (array index 3!)
	// -------- 0010: PC[13] pin
	AFIO->EXTICR[3] &= ~AFIO_EXTICR4_EXTI13;
 800025c:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <CustomGPIOConfig+0x8c>)
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <CustomGPIOConfig+0x8c>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000266:	6153      	str	r3, [r2, #20]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC;
 8000268:	4a0f      	ldr	r2, [pc, #60]	; (80002a8 <CustomGPIOConfig+0x8c>)
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <CustomGPIOConfig+0x8c>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6153      	str	r3, [r2, #20]
	//  -------------------------------------------------------------
	//  -------------------- Interrupt config -----------------------
	//  -------------------------------------------------------------

	// -------- Interrupt masks ---------
	EXTI->IMR |= EXTI_IMR_MR13;
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <CustomGPIOConfig+0x90>)
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <CustomGPIOConfig+0x90>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800027e:	6013      	str	r3, [r2, #0]

	// -------- Edge detection selection - falling ---------
	EXTI->FTSR |= EXTI_FTSR_TR13;
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <CustomGPIOConfig+0x90>)
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <CustomGPIOConfig+0x90>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028a:	60d3      	str	r3, [r2, #12]
	// -------- Activate EXTI15_10_IRQn interrupt ---------
	// -------- EXTI15_10_IRQn falls into ISER[1], and it's
	// -------- correspondong bit is bit[8]
	// -------- In general, as in NVIC_EnableIRQ(IRQn_Type IRQn):
	// -------- NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
	NVIC->ISER[1] |= 0x0100;
 800028c:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <CustomGPIOConfig+0x94>)
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <CustomGPIOConfig+0x94>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000296:	6053      	str	r3, [r2, #4]

}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40011000 	.word	0x40011000
 80002a8:	40010000 	.word	0x40010000
 80002ac:	40010400 	.word	0x40010400
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <EXTI15_10_IRQHandler>:
/**
  * @brief  Interrupt routine for EXTI10..15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR13;
 80002b8:	4a04      	ldr	r2, [pc, #16]	; (80002cc <EXTI15_10_IRQHandler+0x18>)
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <EXTI15_10_IRQHandler+0x18>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c2:	6153      	str	r3, [r2, #20]
	// do something...
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40010400 	.word	0x40010400

080002d0 <main>:
#include "custom_init.h"

static int i=0;

int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

	CustomInit();
 80002d4:	f7ff ff3a 	bl	800014c <CustomInit>

  /* TODO - Add your application code here */


  /* Infinite loop */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <main+0x8>
	...

080002dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000314 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80002e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80002e2:	e003      	b.n	80002ec <LoopCopyDataInit>

080002e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80002e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80002e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80002ea:	3104      	adds	r1, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80002ec:	480b      	ldr	r0, [pc, #44]	; (800031c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80002f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80002f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80002f4:	d3f6      	bcc.n	80002e4 <CopyDataInit>
	ldr	r2, =_sbss
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80002f8:	e002      	b.n	8000300 <LoopFillZerobss>

080002fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80002fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80002fc:	f842 3b04 	str.w	r3, [r2], #4

08000300 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000302:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000304:	d3f9      	bcc.n	80002fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000306:	f000 f83d 	bl	8000384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800030a:	f000 f8e1 	bl	80004d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800030e:	f7ff ffdf 	bl	80002d0 <main>
	bx	lr
 8000312:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000314:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000318:	08000538 	.word	0x08000538
	ldr	r0, =_sdata
 800031c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000320:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000324:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000328:	20000030 	.word	0x20000030

0800032c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC1_2_IRQHandler>

0800032e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr

0800033a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800033e:	e7fe      	b.n	800033e <HardFault_Handler+0x4>

08000340 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000344:	e7fe      	b.n	8000344 <MemManage_Handler+0x4>

08000346 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800034a:	e7fe      	b.n	800034a <BusFault_Handler+0x4>

0800034c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000350:	e7fe      	b.n	8000350 <UsageFault_Handler+0x4>

08000352 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr

0800035e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr

08000376 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
}
 800037a:	bf00      	nop
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
	...

08000384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000388:	4a15      	ldr	r2, [pc, #84]	; (80003e0 <SystemInit+0x5c>)
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <SystemInit+0x5c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000394:	4912      	ldr	r1, [pc, #72]	; (80003e0 <SystemInit+0x5c>)
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <SystemInit+0x5c>)
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SystemInit+0x60>)
 800039c:	4013      	ands	r3, r2
 800039e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003a0:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <SystemInit+0x5c>)
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <SystemInit+0x5c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003b0:	4a0b      	ldr	r2, [pc, #44]	; (80003e0 <SystemInit+0x5c>)
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <SystemInit+0x5c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80003bc:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <SystemInit+0x5c>)
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <SystemInit+0x5c>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SystemInit+0x5c>)
 80003ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003ce:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80003d0:	f000 f878 	bl	80004c4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SystemInit+0x64>)
 80003d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003da:	609a      	str	r2, [r3, #8]
#endif 
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	f8ff0000 	.word	0xf8ff0000
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	2300      	movs	r3, #0
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003fe:	4b2c      	ldr	r3, [pc, #176]	; (80004b0 <SystemCoreClockUpdate+0xc4>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	f003 030c 	and.w	r3, r3, #12
 8000406:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	2b04      	cmp	r3, #4
 800040c:	d007      	beq.n	800041e <SystemCoreClockUpdate+0x32>
 800040e:	2b08      	cmp	r3, #8
 8000410:	d009      	beq.n	8000426 <SystemCoreClockUpdate+0x3a>
 8000412:	2b00      	cmp	r3, #0
 8000414:	d133      	bne.n	800047e <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000416:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <SystemCoreClockUpdate+0xc8>)
 8000418:	4a27      	ldr	r2, [pc, #156]	; (80004b8 <SystemCoreClockUpdate+0xcc>)
 800041a:	601a      	str	r2, [r3, #0]
      break;
 800041c:	e033      	b.n	8000486 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800041e:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <SystemCoreClockUpdate+0xc8>)
 8000420:	4a25      	ldr	r2, [pc, #148]	; (80004b8 <SystemCoreClockUpdate+0xcc>)
 8000422:	601a      	str	r2, [r3, #0]
      break;
 8000424:	e02f      	b.n	8000486 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <SystemCoreClockUpdate+0xc4>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800042e:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <SystemCoreClockUpdate+0xc4>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000438:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	0c9b      	lsrs	r3, r3, #18
 800043e:	3302      	adds	r3, #2
 8000440:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d106      	bne.n	8000456 <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <SystemCoreClockUpdate+0xd0>)
 800044c:	fb02 f303 	mul.w	r3, r2, r3
 8000450:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <SystemCoreClockUpdate+0xc8>)
 8000452:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000454:	e017      	b.n	8000486 <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <SystemCoreClockUpdate+0xc4>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045e:	2b00      	cmp	r3, #0
 8000460:	d006      	beq.n	8000470 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	4a15      	ldr	r2, [pc, #84]	; (80004bc <SystemCoreClockUpdate+0xd0>)
 8000466:	fb02 f303 	mul.w	r3, r2, r3
 800046a:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <SystemCoreClockUpdate+0xc8>)
 800046c:	6013      	str	r3, [r2, #0]
      break;
 800046e:	e00a      	b.n	8000486 <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <SystemCoreClockUpdate+0xcc>)
 8000474:	fb02 f303 	mul.w	r3, r2, r3
 8000478:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <SystemCoreClockUpdate+0xc8>)
 800047a:	6013      	str	r3, [r2, #0]
      break;
 800047c:	e003      	b.n	8000486 <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <SystemCoreClockUpdate+0xc8>)
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <SystemCoreClockUpdate+0xcc>)
 8000482:	601a      	str	r2, [r3, #0]
      break;
 8000484:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <SystemCoreClockUpdate+0xc4>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	091b      	lsrs	r3, r3, #4
 800048c:	f003 030f 	and.w	r3, r3, #15
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <SystemCoreClockUpdate+0xd4>)
 8000492:	5cd3      	ldrb	r3, [r2, r3]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <SystemCoreClockUpdate+0xc8>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	fa22 f303 	lsr.w	r3, r2, r3
 80004a2:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <SystemCoreClockUpdate+0xc8>)
 80004a4:	6013      	str	r3, [r2, #0]
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000
 80004b4:	20000000 	.word	0x20000000
 80004b8:	007a1200 	.word	0x007a1200
 80004bc:	003d0900 	.word	0x003d0900
 80004c0:	20000004 	.word	0x20000004

080004c4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <__libc_init_array>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	2500      	movs	r5, #0
 80004d4:	4e0c      	ldr	r6, [pc, #48]	; (8000508 <__libc_init_array+0x38>)
 80004d6:	4c0d      	ldr	r4, [pc, #52]	; (800050c <__libc_init_array+0x3c>)
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	10a4      	asrs	r4, r4, #2
 80004dc:	42a5      	cmp	r5, r4
 80004de:	d109      	bne.n	80004f4 <__libc_init_array+0x24>
 80004e0:	f000 f81a 	bl	8000518 <_init>
 80004e4:	2500      	movs	r5, #0
 80004e6:	4e0a      	ldr	r6, [pc, #40]	; (8000510 <__libc_init_array+0x40>)
 80004e8:	4c0a      	ldr	r4, [pc, #40]	; (8000514 <__libc_init_array+0x44>)
 80004ea:	1ba4      	subs	r4, r4, r6
 80004ec:	10a4      	asrs	r4, r4, #2
 80004ee:	42a5      	cmp	r5, r4
 80004f0:	d105      	bne.n	80004fe <__libc_init_array+0x2e>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004f8:	4798      	blx	r3
 80004fa:	3501      	adds	r5, #1
 80004fc:	e7ee      	b.n	80004dc <__libc_init_array+0xc>
 80004fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000502:	4798      	blx	r3
 8000504:	3501      	adds	r5, #1
 8000506:	e7f2      	b.n	80004ee <__libc_init_array+0x1e>
 8000508:	08000530 	.word	0x08000530
 800050c:	08000530 	.word	0x08000530
 8000510:	08000530 	.word	0x08000530
 8000514:	08000534 	.word	0x08000534

08000518 <_init>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr

08000524 <_fini>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr
